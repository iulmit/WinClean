// Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license.

using System.Globalization;
using System.Resources;

using static System.IO.Path;
namespace RaphaëlBardini.WinClean.Resources
{
    /// <summary>Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.</summary>
    /// <remarks>Replacing the code generated by the ResX engine, to support string formatting in resource properties.</remarks>
    internal class FormattableErrorMessages
    {
        #region Private Fields

        private static readonly CultureInfo s_dataCulture = CultureInfo.CurrentCulture;
        private static readonly ResourceManager s_resourceManager = new(typeof(FormattableErrorMessages).ToString(), typeof(FormattableErrorMessages).Assembly);
        private static readonly CultureInfo s_uiCulture = CultureInfo.CurrentUICulture;

        #endregion Private Fields

        #region Internal Properties

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="logDirPath">The path of the uncreated directory.</param>
        /// <returns>The localized string corresponding to the unable to create log dir error.</returns>
        internal static string CantCreateLogDir(string logDirPath)
            => string.Format(s_dataCulture, s_resourceManager.GetString("CantCreateLogFile", s_uiCulture), logDirPath);

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="logFilePath">The path of the undeleted log file.</param>
        /// <returns>The localized string corresponding to the unable to delete log file error.</returns>
        internal static string CantDeleteLogFile(string logFilePath)
            => string.Format(s_dataCulture, s_resourceManager.GetString("CantDeleteLogFile", s_uiCulture), logFilePath);

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="secondsElapsed">The number of seconds the scripts have been running for.</param>
        /// <returns>The localized string corresponding to the hung script error.</returns>
        /// <inheritdoc cref="TimeSpan.FromMilliseconds(double)" path="/exception"/>
        internal static string HungScript(double millisecondsElapsed)
            => string.Format(s_dataCulture, s_resourceManager.GetString("HungScript", s_uiCulture), TimeSpan.FromMilliseconds(millisecondsElapsed));

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="name">The name that already exsits.</param>
        /// <returns>The localized string corresponding to the name already exists error.</returns>
        internal static string NameAlreadyExists(string name)
            => string.Format(s_dataCulture, s_resourceManager.GetString("NameAlreadyExists", s_uiCulture), name);

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="wrongPath">The path of the executable file.</param>
        /// <param name="expectedDir">The expected path.</param>
        /// <returns>The localized string corresponding to the wrong executable path error.</returns>
        internal static string WrongExecutablePath(string wrongPath, string expectedDir)
            => string.Format(s_dataCulture, s_resourceManager.GetString("WrongExecutablePath", s_uiCulture), wrongPath, expectedDir);

        /// <summary>Gets a formattable localized string.</summary>
        /// <param name="fullPath">The full path of the script file that cannot be found.</param>
        /// <returns>The localized string corresponding to the script file not found error.</returns>
        /// <inheritdoc cref="GetFileName(string?)" path="/exception"/>
        /// <inheritdoc cref="GetDirectoryName(string?)" path="/exception"/>
        internal static string ScriptFileNotFound(string fullPath)
            => string.Format(s_dataCulture, s_resourceManager.GetString("ScriptFileNotFound", s_uiCulture), GetFileName(fullPath), GetDirectoryName(fullPath));
        #endregion Internal Properties
    }
}
